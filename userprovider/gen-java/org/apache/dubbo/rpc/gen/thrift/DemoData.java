/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.dubbo.rpc.gen.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-01-04")
public class DemoData implements org.apache.thrift.TBase<DemoData, DemoData._Fields>, java.io.Serializable, Cloneable, Comparable<DemoData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DemoData");

  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP2_FIELD_DESC = new org.apache.thrift.protocol.TField("group2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEMO_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("demoStruct", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DemoDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DemoDataTupleSchemeFactory());
  }

  public String group; // required
  public String group2; // required
  public DemoStruct demoStruct; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP((short)1, "group"),
    GROUP2((short)2, "group2"),
    DEMO_STRUCT((short)3, "demoStruct");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP
          return GROUP;
        case 2: // GROUP2
          return GROUP2;
        case 3: // DEMO_STRUCT
          return DEMO_STRUCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP2, new org.apache.thrift.meta_data.FieldMetaData("group2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEMO_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("demoStruct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DemoStruct.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DemoData.class, metaDataMap);
  }

  public DemoData() {
  }

  public DemoData(
    String group,
    String group2,
    DemoStruct demoStruct)
  {
    this();
    this.group = group;
    this.group2 = group2;
    this.demoStruct = demoStruct;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DemoData(DemoData other) {
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetGroup2()) {
      this.group2 = other.group2;
    }
    if (other.isSetDemoStruct()) {
      this.demoStruct = new DemoStruct(other.demoStruct);
    }
  }

  public DemoData deepCopy() {
    return new DemoData(this);
  }

  @Override
  public void clear() {
    this.group = null;
    this.group2 = null;
    this.demoStruct = null;
  }

  public String getGroup() {
    return this.group;
  }

  public DemoData setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getGroup2() {
    return this.group2;
  }

  public DemoData setGroup2(String group2) {
    this.group2 = group2;
    return this;
  }

  public void unsetGroup2() {
    this.group2 = null;
  }

  /** Returns true if field group2 is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup2() {
    return this.group2 != null;
  }

  public void setGroup2IsSet(boolean value) {
    if (!value) {
      this.group2 = null;
    }
  }

  public DemoStruct getDemoStruct() {
    return this.demoStruct;
  }

  public DemoData setDemoStruct(DemoStruct demoStruct) {
    this.demoStruct = demoStruct;
    return this;
  }

  public void unsetDemoStruct() {
    this.demoStruct = null;
  }

  /** Returns true if field demoStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetDemoStruct() {
    return this.demoStruct != null;
  }

  public void setDemoStructIsSet(boolean value) {
    if (!value) {
      this.demoStruct = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case GROUP2:
      if (value == null) {
        unsetGroup2();
      } else {
        setGroup2((String)value);
      }
      break;

    case DEMO_STRUCT:
      if (value == null) {
        unsetDemoStruct();
      } else {
        setDemoStruct((DemoStruct)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP:
      return getGroup();

    case GROUP2:
      return getGroup2();

    case DEMO_STRUCT:
      return getDemoStruct();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP:
      return isSetGroup();
    case GROUP2:
      return isSetGroup2();
    case DEMO_STRUCT:
      return isSetDemoStruct();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DemoData)
      return this.equals((DemoData)that);
    return false;
  }

  public boolean equals(DemoData that) {
    if (that == null)
      return false;

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_group2 = true && this.isSetGroup2();
    boolean that_present_group2 = true && that.isSetGroup2();
    if (this_present_group2 || that_present_group2) {
      if (!(this_present_group2 && that_present_group2))
        return false;
      if (!this.group2.equals(that.group2))
        return false;
    }

    boolean this_present_demoStruct = true && this.isSetDemoStruct();
    boolean that_present_demoStruct = true && that.isSetDemoStruct();
    if (this_present_demoStruct || that_present_demoStruct) {
      if (!(this_present_demoStruct && that_present_demoStruct))
        return false;
      if (!this.demoStruct.equals(that.demoStruct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_group2 = true && (isSetGroup2());
    list.add(present_group2);
    if (present_group2)
      list.add(group2);

    boolean present_demoStruct = true && (isSetDemoStruct());
    list.add(present_demoStruct);
    if (present_demoStruct)
      list.add(demoStruct);

    return list.hashCode();
  }

  @Override
  public int compareTo(DemoData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup2()).compareTo(other.isSetGroup2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group2, other.group2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemoStruct()).compareTo(other.isSetDemoStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemoStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demoStruct, other.demoStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DemoData(");
    boolean first = true;

    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group2:");
    if (this.group2 == null) {
      sb.append("null");
    } else {
      sb.append(this.group2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("demoStruct:");
    if (this.demoStruct == null) {
      sb.append("null");
    } else {
      sb.append(this.demoStruct);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (group == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'group' was not present! Struct: " + toString());
    }
    if (group2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'group2' was not present! Struct: " + toString());
    }
    if (demoStruct == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'demoStruct' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (demoStruct != null) {
      demoStruct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DemoDataStandardSchemeFactory implements SchemeFactory {
    public DemoDataStandardScheme getScheme() {
      return new DemoDataStandardScheme();
    }
  }

  private static class DemoDataStandardScheme extends StandardScheme<DemoData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DemoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group2 = iprot.readString();
              struct.setGroup2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEMO_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.demoStruct = new DemoStruct();
              struct.demoStruct.read(iprot);
              struct.setDemoStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DemoData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.group2 != null) {
        oprot.writeFieldBegin(GROUP2_FIELD_DESC);
        oprot.writeString(struct.group2);
        oprot.writeFieldEnd();
      }
      if (struct.demoStruct != null) {
        oprot.writeFieldBegin(DEMO_STRUCT_FIELD_DESC);
        struct.demoStruct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DemoDataTupleSchemeFactory implements SchemeFactory {
    public DemoDataTupleScheme getScheme() {
      return new DemoDataTupleScheme();
    }
  }

  private static class DemoDataTupleScheme extends TupleScheme<DemoData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DemoData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.group);
      oprot.writeString(struct.group2);
      struct.demoStruct.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DemoData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.group = iprot.readString();
      struct.setGroupIsSet(true);
      struct.group2 = iprot.readString();
      struct.setGroup2IsSet(true);
      struct.demoStruct = new DemoStruct();
      struct.demoStruct.read(iprot);
      struct.setDemoStructIsSet(true);
    }
  }

}

